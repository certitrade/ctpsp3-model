import * as model from "./index"

describe("Status", () => {
	it("is created", () => expect(model.Status.is("created")).toBeTruthy())
	it("is ordered", () => expect(model.Status.is("ordered")).toBeTruthy())
	it("is cancelled", () => expect(model.Status.is("cancelled")).toBeTruthy())
	it("is charged", () => expect(model.Status.is("charged")).toBeTruthy())
	it("is paid", () => expect(model.Status.is("paid")).toBeTruthy())
	it("is refunded", () => expect(model.Status.is("refunded")).toBeTruthy())

	it("order created", () => expect(model.Status.change("created", "order")).toBe("ordered"))
	it("order ordered", () => expect(model.Status.change("ordered", "order")).toBe(undefined))
	it("order cancelled", () => expect(model.Status.change("cancelled", "order")).toBe(undefined))
	it("order charged", () => expect(model.Status.change("charged", "order")).toBe(undefined))
	it("order paid", () => expect(model.Status.change("paid", "order")).toBe(undefined))
	it("order refunded", () => expect(model.Status.change("refunded", "order")).toBe(undefined))

	it("cancel created", () => expect(model.Status.change("created", "cancel")).toBe("cancelled"))
	it("cancel ordered", () => expect(model.Status.change("ordered", "cancel")).toBe("cancelled"))
	it("cancel cancelled", () => expect(model.Status.change("cancelled", "cancel")).toBe(undefined))
	it("cancel charged", () => expect(model.Status.change("charged", "cancel")).toBe(undefined))
	it("cancel paid", () => expect(model.Status.change("paid", "cancel")).toBe(undefined))
	it("cancel refunded", () => expect(model.Status.change("refunded", "cancel")).toBe(undefined))

	it("charge created", () => expect(model.Status.change("created", "charge")).toBe(undefined))
	it("charge ordered", () => expect(model.Status.change("ordered", "charge")).toBe("charged"))
	it("charge cancelled", () => expect(model.Status.change("cancelled", "charge")).toBe(undefined))
	it("charge charged", () => expect(model.Status.change("charged", "charge")).toBe(undefined))
	it("charge paid", () => expect(model.Status.change("paid", "charge")).toBe(undefined))
	it("charge refunded", () => expect(model.Status.change("refunded", "charge")).toBe(undefined))

	it("pay created", () => expect(model.Status.change("created", "pay")).toBe(undefined))
	it("pay ordered", () => expect(model.Status.change("ordered", "pay")).toBe(undefined))
	it("pay cancelled", () => expect(model.Status.change("cancelled", "pay")).toBe(undefined))
	it("pay charged", () => expect(model.Status.change("charged", "pay")).toBe("paid"))
	it("pay paid", () => expect(model.Status.change("paid", "pay")).toBe(undefined))
	it("pay refunded", () => expect(model.Status.change("refunded", "pay")).toBe(undefined))

	it("refund created", () => expect(model.Status.change("created", "refund")).toBe(undefined))
	it("refund ordered", () => expect(model.Status.change("ordered", "refund")).toBe(undefined))
	it("refund cancelled", () => expect(model.Status.change("cancelled", "refund")).toBe(undefined))
	it("refund charged", () => expect(model.Status.change("charged", "refund")).toBe("refunded"))
	it("refund paid", () => expect(model.Status.change("paid", "refund")).toBe("refunded"))
	it("refund refunded", () => expect(model.Status.change("refunded", "refund")).toBe(undefined))
})
